module Godot
  interface _ToGodot[out G < Variant] def to_godot: () -> G end
  
  type variant_like = _ToGodot[Variant]
  type variant = Variant | bool? | Integer | Float
  class Variant
    include Godot
    VARIANT_TYPE: Integer
    
    def self.allocate: () -> instance
    
    private def initialize_copy: (instance other) -> void
    
    def initialize: (*variant_like args) -> void
    alias _init initialize
    %a{steep:deprecated} def godot_send: (interned meth, *variant_like args) -> variant
    
    def [] : (variant_like key) -> variant
    def get: (variant_like key) -> variant?
    def []=: (variant_like key, variant_like value) -> variant
    def set: (variant_like key, variant_like value) -> variant?
    
    def has_key: (variant_like key) -> bool
    def key?: (untyped key) -> bool # `untyped` instead of `top`: https://github.com/soutaro/steep/issues/918
    def has_method: (interned name) -> bool
    
    def hash: ...
    #def eql?: ...
    alias == eql?
    
    #include _ToGodot[self]
    def to_godot: () -> self # https://github.com/soutaro/steep/issues/916
    def nonzero?: () -> bool
  end
end
