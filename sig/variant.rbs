module Godot
  interface _ToGodot[out G < Variant] def to_godot: () -> G end
  
  type type_like[out T < Variant] = Kernel & _ToGodot[T]
  type variant_like = type_like[Variant]
  type variant = Variant | bool?
  class Variant
    include Godot
    VARIANT_TYPE: Integer
    
    def self.allocate: () -> instance
    private def initialize_copy: (instance other) -> void
    
    def initialize: (*variant_like args) -> void
    def godot_send: (interned meth, *variant_like args) -> variant
    
    def [] : (variant_like key) -> variant
    def get: (variant_like key) -> variant?
    def []=: (variant_like key, variant_like value) -> variant
    def set: (variant_like key, variant_like value) -> variant?
    
    def has_method: (interned name) -> bool
    def respond_to_missing?: (Symbol | ::String name, ?boolish include_all) -> bool
    def method_missing: (Symbol | ::String name, *variant_like args) -> variant
    
    def to_godot: () -> self
    def nonzero?: () -> bool
  end
end
